<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱喝茶的帮主</title>
  
  <subtitle>优雅的写代码...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://banggu.github.io/"/>
  <updated>2018-10-22T04:59:45.517Z</updated>
  <id>https://banggu.github.io/</id>
  
  <author>
    <name>bangzhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://banggu.github.io/2018/12/23/hello-world/"/>
    <id>https://banggu.github.io/2018/12/23/hello-world/</id>
    <published>2018-12-23T11:00:29.128Z</published>
    <updated>2018-10-22T04:59:45.517Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>summary_of_process_android_target26</title>
    <link href="https://banggu.github.io/2018/11/25/summary-of-process-android-target26/"/>
    <id>https://banggu.github.io/2018/11/25/summary-of-process-android-target26/</id>
    <published>2018-11-25T09:21:58.000Z</published>
    <updated>2018-11-25T09:25:24.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-target-26-处理遇到的问题"><a class="markdownIt-Anchor" href="#android-target-26-处理遇到的问题"></a> Android Target 26 处理遇到的问题</h3><p>最近项目升 target26处理，遇到了很多问题，这里总结一下：</p><h4 id="1brocastreceiver相关"><a class="markdownIt-Anchor" href="#1brocastreceiver相关"></a> <strong>1.BrocastReceiver相关</strong></h4><p>由于 Android 8.0 引入了新的广播接收器限制，注册的隐式广播在运行时将不起作用，因此需要移除大部分的隐式广播。主要的处理方式有以下三种：</p><ul><li>隐式广播白名单</li><li>使用 JobScheduler 实现类似的功能</li><li>使用动态注册的广播</li></ul><p><strong>1.1隐式广播白名单</strong></p><p>在8.0中还是有部分隐式广播可以继续使用，它们就是“白名单”广播，包括：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACTION_LOCKED_BOOT_COMPLETED, ACTION_BOOT_COMPLETED</span><br><span class="line">ACTION_USER_INITIALIZE</span><br><span class="line">ACTION_LOCALE_CHANGED</span><br><span class="line"></span><br><span class="line">ACTION_USB_ACCESSORY_ATTACHED, ACTION_USB_ACCESSORY_DETACHED, ACTION_USB_DEVICE_ATTACHED, ACTION_USB_DEVICE_DETACHED</span><br><span class="line"></span><br><span class="line">ACTION_CONNECTION_STATE_CHANGED, ACTION_CONNECTION_STATE_CHANGED, ACTION_ACL_CONNECTED, ACTION_ACL_DISCONNECTED</span><br><span class="line"></span><br><span class="line">ACTION_CARRIER_CONFIG_CHANGED,TelephonyIntents.ACTION_*_SUBSCRIPTION_CHANGED, &quot;TelephonyIntents.SECRET_CODE_ACTION&quot;, ACTION_PHONE_STATE_CHANGED, ACTION_PHONE_ACCOUNT_REGISTERED, ACTION_PHONE_ACCOUNT_UNREGISTERED</span><br><span class="line"></span><br><span class="line">LOGIN_ACCOUNTS_CHANGED_ACTION</span><br><span class="line">ACTION_ACCOUNT_REMOVED</span><br><span class="line">ACTION_PACKAGE_DATA_CLEARED</span><br><span class="line">ACTION_PACKAGE_FULLY_REMOVED</span><br><span class="line">ACTION_NEW_OUTGOING_CALL</span><br><span class="line">ACTION_DEVICE_OWNER_CHANGED</span><br><span class="line">ACTION_EVENT_REMINDER</span><br><span class="line"></span><br><span class="line">ACTION_MEDIA_MOUNTED, ACTION_MEDIA_CHECKING, ACTION_MEDIA_UNMOUNTED, ACTION_MEDIA_EJECT, ACTION_MEDIA_UNMOUNTABLE, ACTION_MEDIA_REMOVED, ACTION_MEDIA_BAD_REMOVAL</span><br><span class="line"></span><br><span class="line">SMS_RECEIVED_ACTION, WAP_PUSH_RECEIVED_ACTION</span><br></pre></td></tr></table></figure><p>具体说明可参见官方文档：</p><p><a href="https://developer.android.com/guide/components/broadcast-exceptions?hl=zh-cn" target="_blank" rel="noopener">Implicit Broadcast Exceptions</a></p><p><strong>1.2使用 JobScheduler 实现类似的功能</strong></p><p>在许多情况下，之前注册隐式广播可以使用 <code>JobScheduler</code> 实现类似的功能。如设备网络状态变化、设备充电状态变化、低电量等。JobScheduler的用法在下面”后台服务相关“会说明。</p><p><strong>1.3使用动态注册的广播</strong></p><p>之前用的静态注册的隐式广播可以改为动态注册的方式实现，建议是在Application类中注册，如下所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CacheReceiver mCacheReceiver = new CacheReceiver();</span><br><span class="line">registerReceiver(mCacheReceiver, createIntentFilter(</span><br><span class="line">ApplicationId.APPLICATION_ID + </span><br><span class="line">        &quot;.transaction.BootCompleteReceiver.BOOT_COMPLETED&quot;,</span><br><span class="line">                ApplicationId.APPLICATION_ID + &quot;.transaction.cachereceiver&quot;,</span><br><span class="line">                ApplicationId.APPLICATION_ID + &quot;.transaction.cachedata&quot;</span><br><span class="line">                ));</span><br><span class="line">                </span><br><span class="line">private IntentFilter createIntentFilter(String... actions) &#123;</span><br><span class="line">IntentFilter intentFilter = new IntentFilter();</span><br><span class="line">    for (String action : actions) &#123;</span><br><span class="line">    intentFilter.addAction(action);</span><br><span class="line">    &#125;</span><br><span class="line">    return intentFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2后台服务相关"><a class="markdownIt-Anchor" href="#2后台服务相关"></a> <strong>2.后台服务相关</strong></h4><p>Android8.0对后台服务做了限制，使得此前一直使用的后台服务（Start Service）无法正常工作。<strong>注意是Start Service，Bind Service不受影响</strong>，仍可以正常使用。下面是官方文档的说明：</p><blockquote><p>处于前台时，应用可以自由创建和运行前台服务与后台服务。 进入后台时，在一个持续数分钟的时间窗内，应用仍可以创建和使用服务。</p><p>在该时间窗结束后，应用将被视为处于 <em>空闲</em> 状态。 此时，系统将停止应用的后台服务，就像应用已经调用服务的“<code>Service.stopSelf()</code>”方法。</p><p>如果针对 Android 8.0 的应用尝试在不允许其创建后台服务的情况下使用 <code>startService()</code> 函数，则该函数将引发一个 <code>IllegalStateException</code>。</p></blockquote><p>处理的方式有四种：</p><ul><li>对于重要程度不高的服务，try-catch 住 <code>startService()</code> 方法</li><li>使用 JobIntentService 代替 IntentService</li><li>使用 JobScheduler</li><li>使用前台服务代替后台服务</li></ul><p><strong>2.1 try-catch 住 <code>startService()</code> 方法</strong></p><p>对于重要程度不高的服务，try-catch 住 <code>startService()</code> 方法，不出现崩溃即可，因为系统会有一个持续数分钟的时间窗来启动和处理服务，我们无法知道系统什么时候允许应用创建后台服务。在允许时，系统自动回去启动服务，不允许时，也不会crash。</p><p><strong>2.2使用 JobIntentService 代替 IntentService</strong></p><p>如果之前的后台服务是用IntentService实现的，则可用JobIntentService代替。</p><p>JobIntentService的用法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InstallMonitorJobIntentService extends JobIntentService &#123;</span><br><span class="line">   private static final int JOB_ID = 1001;</span><br><span class="line"></span><br><span class="line">   public static void enqueueWork(Context context, Intent work) &#123;</span><br><span class="line">       if (null == work) &#123;</span><br><span class="line">           return;</span><br><span class="line">        &#125;</span><br><span class="line">      enqueueWork(context, InstallMonitorJobIntentService.class, JOB_ID, work);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void onHandleWork(@NonNull Intent intent) &#123;</span><br><span class="line">      if (null == intent) &#123;</span><br><span class="line">         return;</span><br><span class="line">      &#125;</span><br><span class="line">      checkInstall(intent);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得在menifest注册时要申明<strong>android.permission.BIND_JOB_SERVICE</strong>权限，否则会出现java.lang.IllegalArgumentException</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;service android:name=&quot;.monitor.InstallMonitorJobIntentService&quot;</span><br><span class="line">    android:permission=&quot;android.permission.BIND_JOB_SERVICE&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>2.3 使用 JobScheduler实现短耗时的后台服务</strong></p><p>对于短耗时的后台服务，可以使用 JobScheduler实现，JobScheduler的用法和 JobIntentService 很相似，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InstallMonitorJobService extends JobService &#123;</span><br><span class="line">   public static final String PACKAGE_NAME_KEY = &quot;package_name_key&quot;;</span><br><span class="line">   private static final String TAG = InstallMonitorJobService.class.getSimpleName();</span><br><span class="line">   private String mPkgName;</span><br><span class="line">   </span><br><span class="line">   public static void startScheduleJob (Context context, String pkg) &#123;</span><br><span class="line">        JobInfo.Builder builder = new JobInfo.Builder(JOB_ID, </span><br><span class="line">        new ComponentName(context, InstallMonitorJobService.class));</span><br><span class="line">        builder.setOverrideDeadline(2000);</span><br><span class="line">        builder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);</span><br><span class="line"></span><br><span class="line">        PersistableBundle extras = new PersistableBundle();</span><br><span class="line">        extras.putString(InstallMonitorJobService.PACKAGE_NAME_KEY, pkg);</span><br><span class="line">        builder.setExtras(extras);</span><br><span class="line"></span><br><span class="line">        JobScheduler mJobScheduler = </span><br><span class="line">        (JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line">        </span><br><span class="line">        // 这里就将开始在service里边处理我们配置好的job</span><br><span class="line">        mJobScheduler.schedule(builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void onDestroy() &#123;</span><br><span class="line">      super.onDestroy();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public boolean onStartJob(JobParameters params) &#123;</span><br><span class="line">      if (Loger.isD()) &#123;</span><br><span class="line">         Log.e(TAG, &quot;InstallMonitorJobService onStartJob&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      mPkgName = params.getExtras().getString(PACKAGE_NAME_KEY);</span><br><span class="line">      checkInstall(mPkgName);</span><br><span class="line">      return true;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public boolean onStopJob(JobParameters params) &#123;</span><br><span class="line">      if (Loger.isD()) &#123;</span><br><span class="line">         Log.e(TAG, &quot;InstallMonitorJobService onStopJob&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      return false;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JobScheduler同样需要在menifest的注册中申明 <strong>android.permission.BIND_JOB_SERVICE</strong> 权限。</p><p><strong>2.4 使用前台服务代替长耗时的后台服务</strong></p><p>使用新的 <code>Context.startForegroundService()</code> 方法启动一个前台服务，并且必须在创建服务后的五秒内调用该服务的 <code>startForeground()</code> 函数。否则会出现ANR。</p><h4 id="3权限相关"><a class="markdownIt-Anchor" href="#3权限相关"></a> <strong>3.权限相关</strong></h4><p>在 Android 8.0 之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。</p><p>对于针对 Android 8.0 的应用，此行为已被纠正。系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。</p><p>我们项目处理target26时遇到过这类异常：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Non-fatal Exception: java.lang.SecurityException</span><br><span class="line">Permission Denial: opening provider com.android.providers.contacts.ContactsProvider2 from ProcessRecord&#123;ada6f44 14724:com.cjb.tomatoSchedulers/u0a173&#125; (pid=14724, uid=10173) requires android.permission.READ_CONTACTS or android.permission.WRITE_CONTACTS</span><br><span class="line">android.os.Parcel.readException (Parcel.java:1959)</span><br><span class="line">android.content.ContentResolver.registerContentObserver (ContentResolver.java:1919)</span><br><span class="line">...</span><br><span class="line">android.os.Handler.dispatchMessage (Handler.java:105)</span><br><span class="line">android.os.HandlerThread.run (HandlerThread.java:65)</span><br></pre></td></tr></table></figure><p>这类异常出现的场景是，应用被按非正常流程启动，比如应用从未打开或从未授权过，此时收到推送或者广播被拉起，进入一个需要使用某些敏感权限的页面，则会出现crash。可以在这些需要授权的地方加入权限判断，若需要申请权限且可以申请（在页面中），则先申请授权；若需要申请且不能申请（在Serviece中，用户不能授权），则关闭当前操作并返回。</p><h4 id="4悬浮窗相关"><a class="markdownIt-Anchor" href="#4悬浮窗相关"></a> <strong>4.悬浮窗相关</strong></h4><p>在Android8.0中，使用 <code>SYSTEM_ALERT_WINDOW</code> 权限的应用无法再使用以下窗口类型来在其他应用和系统窗口上方显示提醒窗口：</p><ul><li><code>TYPE_PHONE</code></li><li><code>TYPE_PRIORITY_PHONE</code></li><li><code>TYPE_SYSTEM_ALERT</code></li><li><code>TYPE_SYSTEM_OVERLAY</code></li><li><code>TYPE_SYSTEM_ERROR</code></li></ul><p>相反，应用必须使用名为 <code>TYPE_APPLICATION_OVERLAY</code> 的新窗口类型。</p><p>使用 <code>TYPE_APPLICATION_OVERLAY</code> 窗口类型显示应用的提醒窗口时，请记住新窗口类型的以下特性：</p><ul><li>应用的提醒窗口始终显示在状态栏和输入法等关键系统窗口的下面。</li><li>系统可以移动使用 <code>TYPE_APPLICATION_OVERLAY</code> 窗口类型的窗口或调整其大小，以改善屏幕显示效果。</li><li>通过打开通知栏，用户可以访问设置来阻止应用显示使用 <code>TYPE_APPLICATION_OVERLAY</code> 窗口类型显示的提醒窗口。</li></ul><h4 id="5通知渠道相关"><a class="markdownIt-Anchor" href="#5通知渠道相关"></a> <strong>5.通知渠道相关</strong></h4><p>Android 8.0 重新设计了通知，从8.0开始，通知都必须通过通知渠道推送。否则，通知将不会出现在通知栏且会报错。</p><p>创建通知栏的代码如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNotificationChannel</span><span class="params">(<span class="keyword">int</span> channelId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create the NotificationChannel, but only on API 26+ because</span></span><br><span class="line">    <span class="comment">// the NotificationChannel class is new and not in the support library</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">        CharSequence name = getString(R.string.channel_name);</span><br><span class="line">        String description = getString(R.string.channel_description);</span><br><span class="line">        <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_DEFAULT;</span><br><span class="line">        NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(channelId, name, </span><br><span class="line">        importance);</span><br><span class="line">        channel.setDescription(description);</span><br><span class="line">        <span class="comment">// Register the channel with the system; you can't change the importance</span></span><br><span class="line">        <span class="comment">// or other notification behaviors after this</span></span><br><span class="line">        NotificationManager notificationManager = </span><br><span class="line">            getSystemService(NotificationManager.class);</span><br><span class="line">        notificationManager.createNotificationChannel(channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用原先的值创建已经存在的渠道不执行任何操作，所以可以在Application类中创建渠道。</strong></p><p>通过通知渠道推送通知的代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createNotificationChannel(channelId, </span><br><span class="line">MyApp.getApp().getString(R.string.channel_name_push),</span><br><span class="line">        NotificationManager.IMPORTANCE_HIGH , sound);</span><br><span class="line">NotificationCompat.Builder builder = new NotificationCompat.Builder(context, </span><br><span class="line">channelId);</span><br><span class="line">builder.setGroup(</span><br><span class="line">        SelfMAppUrlActionNotiIdVariable.NOTIFICATION_GROUP_KEY_NEW_MESSAGE)</span><br><span class="line">        .setSmallIcon(iconRes)</span><br><span class="line">        .setTicker(showText)</span><br><span class="line">        .setWhen(timeMillis)</span><br><span class="line">        .setLargeIcon(largeIcon)</span><br><span class="line">        .setAutoCancel(true)</span><br><span class="line">        setContentTitle(msgTitle)</span><br><span class="line">       .setContentText(msgDsp)</span><br><span class="line">       .setContentIntent(pendingIntent)</span><br><span class="line">       .setDeleteIntent(deleteIntent);</span><br><span class="line">Notification notification = builder.build();</span><br><span class="line">NotificationManager nm = </span><br><span class="line">(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">nm.notify(notifyId, notification);</span><br></pre></td></tr></table></figure><p><strong>注意在将通知推送到通知渠道之后，该通知的属性就不能修改了，包括震动、铃声这些，所以若需要修改则只能新建一个渠道</strong>。还有每次新建渠道之前记得删除掉之前的渠道，注意只删除那些没有通知的渠道。</p><p>用下面的方法删除：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void deleteNoNumberNotification(String newChannelId) &#123;</span><br><span class="line">    NotificationManager nm = (NotificationManager) MmsApp.getMmsApp().getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">    if (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;NotificationChannel&gt; notificationChannels = nm.getNotificationChannels();</span><br><span class="line">    if (notificationChannels == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (NotificationChannel channel : notificationChannels) &#123;</span><br><span class="line">        if (channel.getId() == null || channel.getId().equals(newChannelId)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int notificationNumbers = getNotificationNumbers(nm, channel.getId());</span><br><span class="line">        if (notificationNumbers == 0) &#123;</span><br><span class="line">            nm.deleteNotificationChannel(channel.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int getNotificationNumbers(NotificationManager mNotificationManager, String channelId) &#123;</span><br><span class="line">        if (mNotificationManager == null || TextUtils.isEmpty(channelId)) &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        int numbers = 0;</span><br><span class="line">        StatusBarNotification[] activeNotifications = </span><br><span class="line">        mNotificationManager.getActiveNotifications();</span><br><span class="line">        for (StatusBarNotification item : activeNotifications) &#123;</span><br><span class="line">            Notification notification = item.getNotification();</span><br><span class="line">            if (notification != null) &#123;</span><br><span class="line">                if (channelId.equals(notification.getChannelId())) &#123;</span><br><span class="line">                    numbers++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return numbers;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们项目在处理自定义铃声时就遇到这个问题，之前的通知铃声是直接通过notification来实现的，没有使用通知渠道来处理消息通知，所以通知铃声会无法生效。改为用通知渠道推送通知后，就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;android-target-26-处理遇到的问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#android-target-26-处理遇到的问题&quot;&gt;&lt;/a&gt; Android Target 26 处理遇到的问题&lt;/h3&gt;
&lt;p&gt;最近项
      
    
    </summary>
    
    
      <category term="Android Learning" scheme="https://banggu.github.io/tags/Android-Learning/"/>
    
  </entry>
  
  <entry>
    <title>androidTextLinearColorGradient</title>
    <link href="https://banggu.github.io/2018/10/22/androidTextLinearColorGradient/"/>
    <id>https://banggu.github.io/2018/10/22/androidTextLinearColorGradient/</id>
    <published>2018-10-22T15:29:23.000Z</published>
    <updated>2018-11-25T07:06:15.636Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线性颜色渐变"><a class="markdownIt-Anchor" href="#线性颜色渐变"></a> 线性颜色渐变</h3><p>最近遇到一个需要用到线性颜色渐变的需求，而且后期还可能改为颜色“闪动”的效果。<br>预期效果如下：</p><p><img src="./androidTextLinearColorGradient/textgradient.png" alt=""></p><p>​<br>于是就去研究了一下线性颜色渐变，这里做下总结。</p><p>实现线性颜色渐变，有四种方式：</p><p>1.自定义View继承自TextView，获取View 的Paint对象，并给Paint对象设置渐变。</p><p>2.用canvas#drawText方法，在onDraw方法中设置渐变并绘制。</p><p>3.用StaticLayout实现多行文本颜色渐变。</p><p>4.用DynamicLayout实现多行文本颜色渐变。<br>​<br>下面详细说明这四种方式：</p><h4 id="1直接获取paint对象并给paint设置lineargradient"><a class="markdownIt-Anchor" href="#1直接获取paint对象并给paint设置lineargradient"></a> <strong>1.直接获取Paint对象，并给Paint设置LinearGradient</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LinearGradientTextView extends TextView &#123;</span><br><span class="line">    private LinearGradient mLinearGradient;</span><br><span class="line">    private Paint mPaint;</span><br><span class="line">    private int mViewWidth = 0;</span><br><span class="line"></span><br><span class="line">    public LinearGradientTextView1(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LinearGradientTextView1(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LinearGradientTextView1(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">        super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        if (mViewWidth == 0) &#123;</span><br><span class="line">            mViewWidth = getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">            mLinearGradient = new LinearGradient(0, 0, mViewWidth, 0,</span><br><span class="line">                    new int[]&#123;0xFFFA3DB3, 0xFF3D53FB&#125;, null,</span><br><span class="line">                    Shader.TileMode.REPEAT);</span><br><span class="line"></span><br><span class="line">            mPaint = getPaint();</span><br><span class="line">            mPaint.setShader(mLinearGradient);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        setGravity(Gravity.LEFT);</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下图：</p><p><img src="./androidTextLinearColorGradient/getPaintGradient.png" alt="getPaint 实现渐变" title="getPaint 实现渐变"><br>​<br>代码很简单，就是在onSizeChanged获取mPaint,并给mPaint设置线性渐变，然后在onDraw</p><p>方法里绘制出来。如果你只是想在TextView中显示渐变颜色的文本，这种方式是最简单的。</p><h4 id="2canvasdrawtext实现颜色渐变"><a class="markdownIt-Anchor" href="#2canvasdrawtext实现颜色渐变"></a> <strong>2.canvas#drawText实现颜色渐变</strong></h4><p>这种方式更多用于自定义绘图或者进行图片处理时绘制文字。当然也可以用于TextView<br>绘制渐变文本。下面给出的例子是在ImageView中绘制颜色渐变的文本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class GradientImageView extends ImageView &#123;</span><br><span class="line">private LinearGradient mLinearGradient;</span><br><span class="line">private Paint mPaint;</span><br><span class="line">private int mViewWidth = 0;</span><br><span class="line">private String mSrcString;</span><br><span class="line"></span><br><span class="line">public GradientImageView(Context context) &#123;</span><br><span class="line">    this(context, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public GradientImageView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">    this(context, attrs, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public GradientImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">    super(context, attrs, defStyleAttr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">    super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    if (mViewWidth == 0) &#123;</span><br><span class="line">        mViewWidth = getMeasuredWidth();</span><br><span class="line">        mLinearGradient = new LinearGradient(0, 0, mViewWidth, 0,</span><br><span class="line">                new int[]&#123;0xFFFA3DB3, 0xFF3D53FB&#125;, null,</span><br><span class="line">                Shader.TileMode.REPEAT);</span><br><span class="line"></span><br><span class="line">        mPaint = new Paint();</span><br><span class="line">        mPaint.setTextSize(ScreenUtil.dpToPx(getResources(), 16));</span><br><span class="line">        mPaint.setShader(mLinearGradient);</span><br><span class="line"></span><br><span class="line">        mSrcString = &quot;there are several linearGradient lines:+&quot; + &quot;\n&quot; +</span><br><span class="line">&quot;This is the first line of gradient text&quot; + &quot;\n&quot; +</span><br><span class="line">&quot;this is the second line of gradient text&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">    super.onDraw(canvas);</span><br><span class="line">    canvas.drawText(mSrcString, 10, 300, mPaint);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下图：</p><p><img src="./androidTextLinearColorGradient/drawTextGradient.png" alt="canvas#drawText 实现渐变" title="canvas#drawText 实现渐变"></p><p><strong>需要注意的是，这种方式实现的渐变文本，是不能换行的。也就是说，不管文本有多长，都只能一行显<br>示（例子中就是把三行的字符串显示为一行）</strong></p><h4 id="3用staticlayout实现多行文本颜色渐变"><a class="markdownIt-Anchor" href="#3用staticlayout实现多行文本颜色渐变"></a> <strong>3.用StaticLayout实现多行文本颜色渐变</strong></h4><p>StaticLayout是一个用来处理文本换行的控件，可以用它来实现多行文本颜色渐变。</p><p>StaticLayout常用的构造函数是这个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public StaticLayout (CharSequence source, </span><br><span class="line">                TextPaint paint, </span><br><span class="line">                int width, </span><br><span class="line">                Layout.Alignment align, </span><br><span class="line">                float spacingmult, </span><br><span class="line">                float spacingadd, </span><br><span class="line">                boolean includepad)</span><br></pre></td></tr></table></figure><p>还有两个不常用的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public StaticLayout(CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad) </span><br><span class="line"></span><br><span class="line">public StaticLayout(CharSequence source, int bufstart, int bufend, TextPaint paint, int outerwidth, Layout.Alignment align, float spacingmult, float spacingadd, boolean includepad, TextUtils.TruncateAt ellipsize, int ellipsizedWidth)</span><br></pre></td></tr></table></figure><p>在android api 28 之后，上面几个构造函数都将被废弃，将使用StaticLayout.Builder替代。StaticLayout.Builder</p><p>的用法也很简单，就是先调用 StaticLayout#obtain方法构造StaticLayout.Builder对象，在调用Builder对象的一</p><p>系列seter方法，最后调用build()方法。详细请看官方文档：</p><p><a href="https://developer.android.google.cn/reference/android/text/StaticLayout.Builder" target="_blank" rel="noopener">StaticLayout.Builder用法</a></p><p>下面说明一下各个参数的含义：</p><p>source： 要显示的文本</p><p>bufstart：要处理文本的开始字符位置</p><p>bufend：要处理文本的结束字符位置</p><p>paint：画笔对象</p><p>width：文本宽度，超过这个区域会自动换行</p><p>outerwidth：换行宽度，超过这个宽度会自动换行</p><p>align：对齐方式</p><p>spacingmult：行间距，通常设置为1.0f，设置了这个值后，行间距将变为默认间距乘以这个数值，如1.5</p><p>表示1.5倍行间距</p><p>spacingadd：行间距增加值，最终的行间距 = 默认间距 * spacingmult + spacingadd</p><p>includepad：设置是否包括超出字体上升和下降的额外空间，一般设置为true，设置了true之后，文本会</p><p>垂直居中显示，可避免在某些多语言下，文案被裁剪。</p><p>ellipsize： 当文本超出区域或者行数超出限制时，省略的显示位置</p><p>ellipsizedWidth：显示省略的那一行可显示文本的宽度，设置0则那一行显示为 …</p><p>下面进入正题，看下怎么用StaticLayout显示多行颜色渐变，下面是主要的代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">    super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    if (mViewWidth == 0) &#123;</span><br><span class="line">        mViewWidth = getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">        mLinearGradient = new LinearGradient(0, 0, mViewWidth, 0,</span><br><span class="line">                new int[]&#123;0xFFD70F00, 0xFFD53A02, 0xFFDB9501, 0xFF3C9B03, 0xFF04C0AF, 0xFF020098, 0xFF4C0177&#125;, null,</span><br><span class="line">                Shader.TileMode.REPEAT);</span><br><span class="line"></span><br><span class="line">        mSrcString = getResources().getString(R.string.home_lineargradient_text);</span><br><span class="line">        mTextPaint = new TextPaint();</span><br><span class="line">        mTextPaint.setTextSize(ScreenUtil.dpToPx(getResources(), 20));</span><br><span class="line">        mTextPaint.setShader(mLinearGradient);</span><br><span class="line"></span><br><span class="line">        mStaticLayout = new StaticLayout(mSrcString, 0, 120, mTextPaint, mViewWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true,</span><br><span class="line">                TextUtils.TruncateAt.END,</span><br><span class="line">                ScreenUtil.dpToPx(getResources(), 10));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">    setGravity(Gravity.LEFT);</span><br><span class="line">    mStaticLayout.draw(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建StaticLayout的时候，把mLinearGradient设置进去，再在onDraw方法中调用 StaticLayout#draw方法，</p><p>就能实现多行的颜色渐变。这里需要注意的是，StaticLayout只能处理那些不能被再次编辑的文本，也就是说</p><p>它处理的文本是固定的，不能改变的，如果要处理可以改变的文本，请使用DynamicLayout。</p><p>运行效果如下图所示：</p><p><img src="./androidTextLinearColorGradient/staticlayoutgradient.png" alt="staticlayoutGradient"></p><h4 id="4用dynamiclayout实现线性颜色渐变"><a class="markdownIt-Anchor" href="#4用dynamiclayout实现线性颜色渐变"></a> 4.用DynamicLayout实现线性颜色渐变</h4><p>DynamicLayout也是一个处理文本换行的控件，它和StaticLayout的用法几乎一模一样。区别就是，DynamicLayout可以处理可编辑的文本，也就是说它处理的文本可以改变。关于它的构造方法及参数的说明请参见StaticLyaout，此处不再赘述。</p><p>在DynamicLayout的构造方法的源码中，有这么一段代码（只截取关键代码）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public DynamicLayout(CharSequence base, CharSequence display,</span><br><span class="line">                     TextPaint paint,</span><br><span class="line">                     int width, Alignment align, TextDirectionHeuristic textDir,</span><br><span class="line">                     float spacingmult, float spacingadd,</span><br><span class="line">                     boolean includepad, int breakStrategy, int hyphenationFrequency,</span><br><span class="line">                     int justificationMode, TextUtils.TruncateAt ellipsize,</span><br><span class="line">                     int ellipsizedWidth) &#123;</span><br><span class="line">                       .......</span><br><span class="line">       if (base instanceof Spannable) &#123;</span><br><span class="line">            if (mWatcher == null)</span><br><span class="line">                mWatcher = new ChangeWatcher(this);</span><br><span class="line"></span><br><span class="line">            // Strip out any watchers for other DynamicLayouts.</span><br><span class="line">            Spannable sp = (Spannable) base;</span><br><span class="line">            ChangeWatcher[] spans = sp.getSpans(0, sp.length(), ChangeWatcher.class);</span><br><span class="line">            for (int i = 0; i &lt; spans.length; i++)</span><br><span class="line">                sp.removeSpan(spans[i]);</span><br><span class="line"></span><br><span class="line">            sp.setSpan(mWatcher, 0, base.length(),</span><br><span class="line">                       Spannable.SPAN_INCLUSIVE_INCLUSIVE |</span><br><span class="line">                       (PRIORITY &lt;&lt; Spannable.SPAN_PRIORITY_SHIFT));</span><br><span class="line">       &#125;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入构造方法的base是实现了 Spannable接口的实例时，DynamicLayout会自动给这个base设置ChangeWatcher监听器，ChangeWatcher实际上就是一个TextWatcher接口，用于监听base序列的改变。当base改变时，ChangeWatcher#onSpanChanged方法会回调，然后去刷新DynamicLayout的布局。这也就是为什么DynamicLayout能处理可编辑文本的原因。</p><p>说回正题，用DynamicLayout实现多行渐变文本也很简单，关键代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">    super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    if (mViewWidth == 0) &#123;</span><br><span class="line">        mViewWidth = getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">        mLinearGradient = new LinearGradient(0, 0, mViewWidth, 0,</span><br><span class="line">             new int[]&#123;0xFFD70F00, 0xFFD53A02, 0xFFDB9501, 0xFF3C9B03, 0xFF04C0AF, 0xFF020098, 0xFF4C0177&#125;, null,</span><br><span class="line">                Shader.TileMode.REPEAT);</span><br><span class="line"></span><br><span class="line">        mSrcString = getResources().getString(R.string.home_lineargradient_text);</span><br><span class="line">        mSpannableStringBuilder = new SpannableStringBuilder(mSrcString+&quot;\n&quot;);</span><br><span class="line">        mTextPaint = new TextPaint();</span><br><span class="line">        mTextPaint.setTextSize(ScreenUtil.dpToPx(getResources(), 16));</span><br><span class="line">        mTextPaint.setShader(mLinearGradient);</span><br><span class="line"></span><br><span class="line">        mDynamicLayout = new DynamicLayout(mSpannableStringBuilder, mTextPaint, mViewWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);</span><br><span class="line">        setOnClickListener(new OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                mSpannableStringBuilder.append(&quot;crazy English liyang !&quot; + &quot;\n&quot;);</span><br><span class="line">                postInvalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">    super.onDraw(canvas);</span><br><span class="line">    canvas.translate(10, 300);</span><br><span class="line">    mDynamicLayout.draw(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中给这个View设置了点击监听，当点击这个View时，它的文本会增加一行，其他的代码和StaticLayout的相似，不做介绍了。运行结果如下：</p><p><img src="./androidTextLinearColorGradient/DynamicLayoutGradient.png" alt="DynamicLayout颜色渐变"></p><p>当点击图片后，会出现多一行文本，如图：</p><p><img src="./androidTextLinearColorGradient/DynamicLayoutGradientClick.png" alt="DynamicLayout Click"></p><h4 id="拓展"><a class="markdownIt-Anchor" href="#拓展"></a> <strong>拓展</strong></h4><p>上面总结了四种实现线性颜色渐变的方式，但是都只能实现“静止”的颜色渐变，没法实现“动态”的渐变。为了以后</p><p>能 <s>反手给设计师一巴掌</s> （不，是满足设计师的要求），下面说明如何实现“动态的渐变”。</p><p>思路也简单，就是让“静止的渐变”每隔一定时间，就位移一定距离，然后刷新重绘，这样就有动态的效果了。下面</p><p>看看关键代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">    super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">    if (mViewWidth == 0) &#123;</span><br><span class="line">        mViewWidth = getMeasuredWidth();</span><br><span class="line"></span><br><span class="line">        mLinearMatrix = new Matrix();</span><br><span class="line">        mLinearGradient = new LinearGradient(0, 0, mViewWidth, 0,</span><br><span class="line">        new int[]&#123;0xFFD70F00, 0xFFD53A02, 0xFFDB9501, 0xFF3C9B03, 0xFF04C0AF, 0xFF020098, 0xFF4C0177&#125;, null,</span><br><span class="line">            Shader.TileMode.REPEAT);</span><br><span class="line"></span><br><span class="line">        mSrcString = getResources().getString(R.string.home_lineargradient_text);</span><br><span class="line">        mTextPaint = new TextPaint();</span><br><span class="line">        mTextPaint.setTextSize(ScreenUtil.dpToPx(getResources(), 20));</span><br><span class="line">        mTextPaint.setShader(mLinearGradient);</span><br><span class="line"></span><br><span class="line">        mStaticLayout = new StaticLayout(mSrcString, mTextPaint, mViewWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">    if (mLinearMatrix != null) &#123;</span><br><span class="line">        mTranslate += mViewWidth / 5;</span><br><span class="line">        if (mTranslate &gt; 2 * mViewWidth) &#123;</span><br><span class="line">            mTranslate = -mViewWidth;</span><br><span class="line">        &#125;</span><br><span class="line">        mLinearMatrix.setTranslate(mTranslate, 0);</span><br><span class="line">        mLinearGradient.setLocalMatrix(mLinearMatrix);</span><br><span class="line"></span><br><span class="line">        canvas.translate(0, 10);</span><br><span class="line">        mStaticLayout.draw(canvas);</span><br><span class="line">        postInvalidateDelayed(50);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过Matrix对象，把位移每隔50毫秒设置给LinearGradient对象，然后再刷新重绘。这里要注意，要给mTranslate设置一个范围（代码中是设置 2*mViewWidth），不然mTranslate的值一直增大，可能造成数值溢出。运行效果如下：</p><p><img src="./androidTextLinearColorGradient/dongtaigif.gif" alt="动态渐变"></p><p>以上就是我所总结的实现线性颜色渐变的方法。有不同意见的朋友，欢迎交流指教。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线性颜色渐变&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线性颜色渐变&quot;&gt;&lt;/a&gt; 线性颜色渐变&lt;/h3&gt;
&lt;p&gt;最近遇到一个需要用到线性颜色渐变的需求，而且后期还可能改为颜色“闪动”的效果。&lt;br&gt;
预期效果如下：&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="Android Learning" scheme="https://banggu.github.io/categories/Android-Learning/"/>
    
    
      <category term="Android Text LinearGradient" scheme="https://banggu.github.io/tags/Android-Text-LinearGradient/"/>
    
  </entry>
  
</feed>
